// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phoneNumber String   @unique
  password    String
  role        UserRole @default(CUSTOMER)
  location    String
  avatarUrl   String    @default("https://static.vecteezy.com/system/resources/previews/005/545/335/non_2x/user-sign-icon-person-symbol-human-avatar-isolated-on-white-backogrund-vector.jpg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  businesses  Business[] @relation("OwnerBusinesses")
}

enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
  ADMIN
}

model Business {
  id            String     @id @default(cuid())
  name          String
  ownerId       String
  owner         User       @relation("OwnerBusinesses", fields: [ownerId], references: [id])
  description   String?
  location      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]
  orders        Order[]    @relation("BusinessOrders")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  customer    User        @relation(fields: [customerId], references: [id])
  businessId  String
  business    Business    @relation("BusinessOrders", fields: [businessId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  payment     Payment?
  delivery    Delivery?
}

enum OrderStatus {
  PENDING
  DISPATCHED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum PaymentMethod {
  MPESA
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Delivery {
  id           String     @id @default(cuid())
  orderId      String     @unique
  order        Order      @relation(fields: [orderId], references: [id])
  riderId      String?
  rider        Rider?     @relation(fields: [riderId], references: [id])
  status       DeliveryStatus @default(PENDING)
  assignedAt   DateTime?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model Rider {
  id         String     @id @default(cuid())
  name       String
  phone      String     @unique
  location   String
  deliveries Delivery[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
